module apb_reg_decoder(

  //system signals
  //input clk, rst_n;

  //APB clk/rst
  input pclk, resetn,

  //APB i/p signals
  input [31:0] paddr,
  input psel,
  input pen,
  input pwrite,
  input [31:0] pwdata,
  
 
  //APB o/p signals
  output reg pready,
  output reg pslverr,
  output reg [31:0] prdata);

  reg [31:0] ctrl0;
  reg [31:0] ctrl1;
  reg [31:0] ctrl2;
  reg [31:0] ctrl3;
  reg [31:0] ctrl4;
  reg [31:0] ctrl5;
  wire [15:0] padddr;

  //PReady logic
  always @(posedge pclk) begin
    if(pen) begin
      pready <= 1'b1;
    end
    else begin
      pready <=1'b0;
    end
  end 
  assign padddr = paddr;
  always @(posedge pclk or negedge resetn) begin
    if(!resetn) begin
      ctrl0 <= 32'h0;
      ctrl1 <= 32'h10;
      ctrl2 <= 32'h20;
      ctrl3 <= 32'h40;
      //ctrl4 <= 32'h50; un-initialized
      ctrl5 <= 32'h0;
      pslverr <= 1'b0;
    end
    case(padddr) 
      'h00 : begin
             pslverr <= 1'b0;
             if(pwrite & psel & pen) begin
               ctrl0 <= pwdata;
             end
             if(!pwrite & psel & pen) begin
               prdata <= ctrl0;
             end 
             end
      'h04 : begin 
             pslverr <= 1'b0;
             if(pwrite & psel & pen) begin
               pslverr <= 1'b1;//RO access
             end
             if(!pwrite & psel & pen) begin
               prdata <= ctrl1;
             end
             end
      'h08 : begin 
             pslverr <= 1'b0;
             if(pwrite & psel & pen) begin
               ctrl2 <= pwdata;
             end
             if(!pwrite & psel & pen) begin
               prdata <= ctrl2;
             end
             end 
      'h0C : begin 
             pslverr <= 1'b0;
             if(pwrite & psel & pen) begin
               ctrl3 <= pwdata;
             end
             if(!pwrite & psel & pen) begin
               pslverr <= 1'b1;//WO access
             end
             end
      'h10 : begin 
              pslverr <= 1'b0;
              if(pwrite & psel & pen) begin
               ctrl4 <= pwdata;
             end
             if(!pwrite & psel & pen) begin
               prdata <= ctrl4;
             end
             end 
      'h14 : begin 
             pslverr <= 1'b0;
             if(pwrite & psel & pen) begin
               ctrl5 <= pwdata;
             end
             if(!pwrite & psel & pen) begin
               prdata <= ctrl5;
             end
             end
      default: begin 
              if(psel & pen) begin
                 pslverr <= 1'b1;
                 prdata <= 'hx;
              end
               end
    endcase
  end
endmodule
               
    


  
  
                               
                                                   
